Casey questions:
 * What about feature test macros? Specify the macro in `<concepts>`?
 * [meta.trans.other]/6: I changed "may not" to "shall not"

[X] DR I have a comment about Expression #1 on page 8; a == d appears twice, but a == move(d) is probably intended for one.

[X] MC Yeah all the moves should be std::move.

[X] WB I have a nit, do we have to say "or not" in "unspecified whether or not" on page 8?

[X] WB Why does it say see below on the additional signatures; e.g. in [concepts.lib.corelang.same]

[X] PS Whatever Casey explained but I can't rephrase it. Maybe an example showing the failing subsumption relationship.

[X] DR I have a comment about DerivedFrom, there's a deleted line but the text below it still refers to the deleted line. [concepts.lib.corelang.derived]

[X] WB Would you be averse to a note here [ConvertibleTo]? The sentence explaination is really really clear.

[ ] CC Yes, it's weird that they're so similar [the intro for Common and CommonReference], but they differ in subtle ways. It would be better if the specification was harmonized between the two. Is that the comment?

[X] MC I think it would be better to use might [not] instead of may [not] in these places. [everywhere]

[ ] CC When experts are confused about the meaning of the requirements [implicit expression variations], that's an indication that the requirements need to be made more clear. I don't think it would need to be a normative change. [Decline for now absent suggestions for improvement.]

[X] WB I'd like to point out something I particularly like in [...swappable] p3, where you say "need be no subsumption relationship" where elsewhere you said "need not be any" -- can you use the former in all places?

[X] CC I think paragraph 4 in [...swappable] is horrible. MC Would it be better if you changed all the lets into a bulleted list? [Yes.]

[X] WB Except for the last bit, 4.1 needs to be combined.

[X] DK I'm concerned about the struck [Swappable/SwappableWith] example; there were a lot of misunderstandings cleared up by the example that are gone.

[X] CC Jonathan, now that you've pointed out "const lvalue of type" it's bothering me too. Would people mind if "const lvalue of type" to be "lvalue of type const"

[X] WB Where it says "may satisfy" in Invocable, should it be "can satisfy"?

[X] WB I think Invocable p2 seems more like an example than a note.

[ ] JW You could say "An invocable type that generates random results would not satisfy RegularInvocable" or similar. [Decline absent ]

[X] JW I think just putting a break before the note [in [concepts.lib.callable.strictweakorder]] would fix that.

[X] WB Where it says "unary template T", class template, alias template? CC Should say class template.

[X] CC That's [`COMMON_REF` spec] miscolored; it should be cyan text; this all clearly came from the ranges TS because common_reference_t isn't in the standard.

[X] BO Could declval<bool>() be bool{}? ... BO I see regarding the declval comment earlier, that common_type uses false for this. We should use false, not true, as previously suggested.

[X] WB Grammar note, where it says any are ill formed [], it should say any is ill formed.

[X] DK 4.3.4, I'm concerned that this uses decay_t; because decay_t is always defined. It needs to exist if COND_RES(CREF(D1), CREF(D2)) exists, and then decay_t that.
