-- P0370R2 --

[X] alg.general/16 "implementations shall provide" => remove shall

[X] 17 seems to fall short; i.e., could ask to convert to function pointer. (Tracked as issue 261)

[X] 18 Wording makes STL nervous ... We could get rid of the weasel wording after removing the deprecated APIs. Limit the possible damage to just these deprecated overloads. (Tracked as issue 261)

[X] Assignable should require a non-const lvalue LHS. (Issue 229)

[X] "Args.." typo

[X] 5.1/7 "customization points objects" s/points/point/

[X] ranges::swap; if overload resolution selects some function [utility.swap]/1.1 (Corrected with "if that expression is valid" wording.)

[X] STL: Missing conditional noexcept on 1.1? (No, intent is that noexcept and constexpr come from the equivalent expression.) Different meaning than typically used for "equivalent to" in the library; Need blanket wording to indicate this usage implies constexpr and noexcept as well. (Tracked as issue 262)

[X] remove "ranges::swap has type void" in utility.swap/1.3

[X] strike [taggedtup.tag]/25 "throws"

[X] Cleanup consistency in the last para of swap "if blah is satisfied" should consistently use the arguments or not. (Consistently do not repeat the parameters.)

[X] "if that expression is valid" on every bullet of every customization point.

[X] Dont redundantly specify "If Foo is not satisfied, then ill-formed NDR" after specifying an equivalent expression that already applies that same requirement. (Specifically, ranges::rbegin and rend need not specify this for BidiIterator when they are equivalent to make_reverse_iterator(...) which already imposes that requirement.)

[X] missing rparens in ranges::end

[X] Cast with static_cast for all the (const T&) casts in the customization points.

[X] nuke bullet 2 of rbegin and rend (let arrays fall through)

[X] "whenever ranges::size(E) is a valid expression, *its* type"

[X] remark vs note when observing the postconditions of CPOs (specifically empty)

[X] != in empty should be ==. Wow.

[X] constexpr things that are constexpr in the WP; specifically advance, distance, next prev. (Tracked as issue 256)

[X] delete excess ">" from advance p6.

[X] Consider removing the allowance for Writable's operator* to be modifying, especially in common_iterator. (Tracked as issue 260)

[X] common_iterator::sent is a bad name (Rename to "sentinel")

[X] common_iterator: We can't assign something that is not initialized. (Tracked as issue 250)

[X] ~common_iterator: destroys **all** members that are initialized.

[X] op< for counted_iterator shouldn't that be a note?

-- P0441 --

[X] "decltype(E) is T" should be "decltype((E)) is T"

[X] move_sentinel constructor mis-use of literal type. shall -> is.

[X] move_sentinel assignment operator returns what?

[X] stray ```

[X] equivalent to **return** xxx

[X] adn -> and
