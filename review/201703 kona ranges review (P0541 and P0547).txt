P0547:

Assignable 1.2.2 needs "valid but unspecified"

Assignable short circuits correctly with "weird" types? require { typename T&&;  } // preconditions may make this moot?

Don't forbid types traits, make it unspecified. "need not be". STL: Blanket wording is better?

merge 1.2.1 into 1.2.

(Reference lib.types.movedfrom in 20 to save on words)

Destructible "of all types" insert a comma "instances of which"

MC wants a note on Destructible indicating that it forbids noexcept(true) destructors.

Don't qualify addressof.

Don't forbid overloaded &. strike 2 & 3.

Think about a new term for "implicit expression variants"

Copy and MoveConstructible, merge 1.1 into 1.

1.1.1 say "u is equal to v"

Use "In" for Readable.

Writable should work with rvalue Out.

P0541:

Ranges TS wide: be consistent about explicitly requiring typename constraints.

replace "see below" with "decltype(auto)" in

basic guarantee in counted_iterator's postincrement and postdecrement. (If that results in inconsistently ordered operations, STL wants a note to explain why.)

simplify common_/counted_iterator++ to be in terms of pre-increment and inherit requirements.

#155:

Consider reducing Boolean to Integral

WeaklyEqualityComparable: "respectively"

EqualityComparable and Relation: a -> t, b -> u

StrictTotallyOrdered: STL prefers bool(a >b) to bool (b < a)

#167 needs the "valid but unspecified" boilerplate fix as well.


LWG:

After applying this, consider making a sweep of the TS to see where "expression-equivalent" could be used to simplify the existing wording. `iter_exchange` is *unlike* `exchange`, in that it always moves from the right-hand operand. It should either have a different / better name, or be exposition-only.
