* [structure.requirements]/1: “program that extends the Ranges library”  — is that the correct term?
Also, it would be nice if the reference in /3 was a link, but I don’t think were set up for cross-document links.

The wording in [structure.requirements] comes straight from C++14, with the obvious replacement of "standard library" with "Ranges library." It may not be the correct term, but it's at least as correct as the standard. Agreed on both counts about linking into the Concepts TS: would be nice, I don't now how to do it and won't find out before the post-meeting mailing deadline tomorrow morning. (Filed issue ericniebler/stl2#291.)


* [concepts.lib.corelang.assignable]/1.2.1: In other places in the document, you use the phrase “the previous value of”, when describing the result of a move-assignment. Here you introduce a new variable “uu”.  Why is this different?  (See [concepts.lib.object.moveconstructible]/1.1 for an example).

Since "value" is never defined, we've been gradually removing uses thereof - previous or otherwise - from the formal semantics. We *do* have a strong notion of equality via substitution in equality-preserving expressions, so it's easier to define two things that "are equal" than two things that "have the same value." In general, though it's not really the case here, it's also nice to have a name for things like "the value of x before <event happens>."

(Filed issue ericniebler/stl2#293 to ensure that this principle is applied consistently.)


* [utility.swap]/1.2 has text spilling off the page to the right.

Fixed. (In commit 378e5a3e).


* [iterators.bidirectional]/3.3: This looks very odd to me.  Is “bool((a—, a), == —b)” the correct expression?

This is a "clever" encoding of "after evaluating a--, bool(a == --b) is true." Would "If bool(a == b), then after evaluating both a-- and --b, bool(a == b) still holds." be clearer? Or perhaps the more terse "If bool(a == b), then (a--, --b, bool(a == b)) is true."? (Filed issue ericniebler/stl2#292.)


* [move.sentinel] could use an introductory sentence or two.

* So could [counted.iterator]

I think adding just-barely-normative introductory material is editorial. We'll cobble something together. (Fixed in commits 2f21473f and a580da79.)


* The title of the section [alg.find.first_of] should probably be “Find First Of”, not “Find First”

Fixed. (In commit 2f21473f.)


* I wonder if it would be simpler to describe mismatch’s results in terms of “equal".  [Definitely not editorial]

(Filed issue ericniebler/stl2#290.)


* [alg.copy]  Does copy_n need a “Requires:” element stating that [result, result + n) is a valid range?

* same concern for fill_n and generate_n.

We have "The result of the application of functions in the library to invalid ranges is undefined." in [iterator.requirements.general]/10 where "range" is defined: "A range is an iterator and a sentinel that designate the beginning and end of the computation." Instead of adding a requirement to every _n algorithm, we should expand the blanket wording to cover (iterator, count) ranges as well. (Filed issue ericniebler/stl2#289.)


* And, of course: search doesn’t return a range ;-)

Pre-existing issue ericniebler/stl2#180 ;)
